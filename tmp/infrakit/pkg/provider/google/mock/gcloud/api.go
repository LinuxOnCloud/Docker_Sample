// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/infrakit/pkg/provider/google/plugin/gcloud (interfaces: API)

package gcloud

import (
	gcloud "github.com/docker/infrakit/pkg/provider/google/plugin/gcloud"
	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/api/compute/v1"
)

// Mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockAPIRecorder
}

// Recorder for MockAPI (not exported)
type _MockAPIRecorder struct {
	mock *MockAPI
}

func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &_MockAPIRecorder{mock}
	return mock
}

func (_m *MockAPI) EXPECT() *_MockAPIRecorder {
	return _m.recorder
}

func (_m *MockAPI) AddInstanceMetadata(_param0 string, _param1 []*v1.MetadataItems) error {
	ret := _m.ctrl.Call(_m, "AddInstanceMetadata", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) AddInstanceMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInstanceMetadata", arg0, arg1)
}

func (_m *MockAPI) AddInstanceToTargetPool(_param0 string, _param1 ...string) error {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddInstanceToTargetPool", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) AddInstanceToTargetPool(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddInstanceToTargetPool", _s...)
}

func (_m *MockAPI) CreateInstance(_param0 string, _param1 *gcloud.InstanceSettings) error {
	ret := _m.ctrl.Call(_m, "CreateInstance", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) CreateInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInstance", arg0, arg1)
}

func (_m *MockAPI) CreateInstanceGroupManager(_param0 string, _param1 *gcloud.InstanceManagerSettings) error {
	ret := _m.ctrl.Call(_m, "CreateInstanceGroupManager", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) CreateInstanceGroupManager(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInstanceGroupManager", arg0, arg1)
}

func (_m *MockAPI) CreateInstanceTemplate(_param0 string, _param1 *gcloud.InstanceSettings) error {
	ret := _m.ctrl.Call(_m, "CreateInstanceTemplate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) CreateInstanceTemplate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInstanceTemplate", arg0, arg1)
}

func (_m *MockAPI) DeleteInstance(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteInstance", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInstance", arg0)
}

func (_m *MockAPI) DeleteInstanceGroupManager(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteInstanceGroupManager", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) DeleteInstanceGroupManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInstanceGroupManager", arg0)
}

func (_m *MockAPI) DeleteInstanceTemplate(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteInstanceTemplate", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) DeleteInstanceTemplate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInstanceTemplate", arg0)
}

func (_m *MockAPI) GetInstance(_param0 string) (*v1.Instance, error) {
	ret := _m.ctrl.Call(_m, "GetInstance", _param0)
	ret0, _ := ret[0].(*v1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) GetInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstance", arg0)
}

func (_m *MockAPI) GetProject() string {
	ret := _m.ctrl.Call(_m, "GetProject")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAPIRecorder) GetProject() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetProject")
}

func (_m *MockAPI) GetZone() string {
	ret := _m.ctrl.Call(_m, "GetZone")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAPIRecorder) GetZone() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetZone")
}

func (_m *MockAPI) ListInstanceGroupInstances(_param0 string) ([]*v1.InstanceWithNamedPorts, error) {
	ret := _m.ctrl.Call(_m, "ListInstanceGroupInstances", _param0)
	ret0, _ := ret[0].([]*v1.InstanceWithNamedPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) ListInstanceGroupInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstanceGroupInstances", arg0)
}

func (_m *MockAPI) ListInstances() ([]*v1.Instance, error) {
	ret := _m.ctrl.Call(_m, "ListInstances")
	ret0, _ := ret[0].([]*v1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) ListInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInstances")
}

func (_m *MockAPI) ResizeInstanceGroupManager(_param0 string, _param1 int64) error {
	ret := _m.ctrl.Call(_m, "ResizeInstanceGroupManager", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) ResizeInstanceGroupManager(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResizeInstanceGroupManager", arg0, arg1)
}

func (_m *MockAPI) SetInstanceTemplate(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "SetInstanceTemplate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) SetInstanceTemplate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetInstanceTemplate", arg0, arg1)
}
