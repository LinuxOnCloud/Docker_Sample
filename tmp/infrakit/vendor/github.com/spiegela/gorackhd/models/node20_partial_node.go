package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Node20PartialNode Post a node into RackHD
// swagger:model node.2.0_PartialNode
type Node20PartialNode struct {

	// auto discover
	AutoDiscover string `json:"autoDiscover,omitempty"`

	// boot settings
	BootSettings interface{} `json:"bootSettings,omitempty"`

	// identifiers
	Identifiers []string `json:"identifiers"`

	// Name of the node
	Name string `json:"name,omitempty"`

	// The list of obm settings
	Obms []*NodesPostObmByID `json:"obms"`

	// relations
	Relations []*RelationsObj `json:"relations"`

	// tags
	Tags string `json:"tags,omitempty"`

	// Type of node
	Type string `json:"type,omitempty"`
}

// Validate validates this node 2 0 partial node
func (m *Node20PartialNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifiers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObms(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node20PartialNode) validateIdentifiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Identifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Identifiers); i++ {

	}

	return nil
}

func (m *Node20PartialNode) validateObms(formats strfmt.Registry) error {

	if swag.IsZero(m.Obms) { // not required
		return nil
	}

	for i := 0; i < len(m.Obms); i++ {

		if swag.IsZero(m.Obms[i]) { // not required
			continue
		}

		if m.Obms[i] != nil {

			if err := m.Obms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("obms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Node20PartialNode) validateRelations(formats strfmt.Registry) error {

	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	for i := 0; i < len(m.Relations); i++ {

		if swag.IsZero(m.Relations[i]) { // not required
			continue
		}

		if m.Relations[i] != nil {

			if err := m.Relations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var node20PartialNodeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compute","compute-container","switch","dae","pdu","mgmt","enclosure","rack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		node20PartialNodeTypeTypePropEnum = append(node20PartialNodeTypeTypePropEnum, v)
	}
}

const (
	// Node20PartialNodeTypeCompute captures enum value "compute"
	Node20PartialNodeTypeCompute string = "compute"
	// Node20PartialNodeTypeComputeContainer captures enum value "compute-container"
	Node20PartialNodeTypeComputeContainer string = "compute-container"
	// Node20PartialNodeTypeSwitch captures enum value "switch"
	Node20PartialNodeTypeSwitch string = "switch"
	// Node20PartialNodeTypeDae captures enum value "dae"
	Node20PartialNodeTypeDae string = "dae"
	// Node20PartialNodeTypePdu captures enum value "pdu"
	Node20PartialNodeTypePdu string = "pdu"
	// Node20PartialNodeTypeMgmt captures enum value "mgmt"
	Node20PartialNodeTypeMgmt string = "mgmt"
	// Node20PartialNodeTypeEnclosure captures enum value "enclosure"
	Node20PartialNodeTypeEnclosure string = "enclosure"
	// Node20PartialNodeTypeRack captures enum value "rack"
	Node20PartialNodeTypeRack string = "rack"
)

// prop value enum
func (m *Node20PartialNode) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, node20PartialNodeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Node20PartialNode) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
