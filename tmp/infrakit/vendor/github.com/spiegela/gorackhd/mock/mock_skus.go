// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/spiegela/gorackhd/monorail (interfaces: SkuIface)

package mock

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	skus "github.com/spiegela/gorackhd/client/skus"
)

// Mock of SkuIface interface
type MockSkuIface struct {
	ctrl     *gomock.Controller
	recorder *_MockSkuIfaceRecorder
}

// Recorder for MockSkuIface (not exported)
type _MockSkuIfaceRecorder struct {
	mock *MockSkuIface
}

func NewMockSkuIface(ctrl *gomock.Controller) *MockSkuIface {
	mock := &MockSkuIface{ctrl: ctrl}
	mock.recorder = &_MockSkuIfaceRecorder{mock}
	return mock
}

func (_m *MockSkuIface) EXPECT() *_MockSkuIfaceRecorder {
	return _m.recorder
}

func (_m *MockSkuIface) SkuPackPost(_param0 *skus.SkuPackPostParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkuPackPostCreated, error) {
	ret := _m.ctrl.Call(_m, "SkuPackPost", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkuPackPostCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkuPackPost(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkuPackPost", arg0, arg1)
}

func (_m *MockSkuIface) SkusGet(_param0 *skus.SkusGetParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusGetOK, error) {
	ret := _m.ctrl.Call(_m, "SkusGet", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusGet", arg0, arg1)
}

func (_m *MockSkuIface) SkusIDDelete(_param0 *skus.SkusIDDeleteParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusIDDeleteNoContent, error) {
	ret := _m.ctrl.Call(_m, "SkusIDDelete", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusIDDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusIDDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusIDDelete", arg0, arg1)
}

func (_m *MockSkuIface) SkusIDDeletePack(_param0 *skus.SkusIDDeletePackParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusIDDeletePackNoContent, error) {
	ret := _m.ctrl.Call(_m, "SkusIDDeletePack", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusIDDeletePackNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusIDDeletePack(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusIDDeletePack", arg0, arg1)
}

func (_m *MockSkuIface) SkusIDGet(_param0 *skus.SkusIDGetParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusIDGetOK, error) {
	ret := _m.ctrl.Call(_m, "SkusIDGet", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusIDGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusIDGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusIDGet", arg0, arg1)
}

func (_m *MockSkuIface) SkusIDGetNodes(_param0 *skus.SkusIDGetNodesParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusIDGetNodesOK, error) {
	ret := _m.ctrl.Call(_m, "SkusIDGetNodes", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusIDGetNodesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusIDGetNodes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusIDGetNodes", arg0, arg1)
}

func (_m *MockSkuIface) SkusIDPutPack(_param0 *skus.SkusIDPutPackParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusIDPutPackCreated, error) {
	ret := _m.ctrl.Call(_m, "SkusIDPutPack", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusIDPutPackCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusIDPutPack(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusIDPutPack", arg0, arg1)
}

func (_m *MockSkuIface) SkusPatch(_param0 *skus.SkusPatchParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusPatchOK, error) {
	ret := _m.ctrl.Call(_m, "SkusPatch", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusPatchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusPatch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusPatch", arg0, arg1)
}

func (_m *MockSkuIface) SkusPost(_param0 *skus.SkusPostParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusPostCreated, error) {
	ret := _m.ctrl.Call(_m, "SkusPost", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusPostCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusPost(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusPost", arg0, arg1)
}

func (_m *MockSkuIface) SkusPut(_param0 *skus.SkusPutParams, _param1 runtime.ClientAuthInfoWriter) (*skus.SkusPutCreated, error) {
	ret := _m.ctrl.Call(_m, "SkusPut", _param0, _param1)
	ret0, _ := ret[0].(*skus.SkusPutCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSkuIfaceRecorder) SkusPut(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SkusPut", arg0, arg1)
}
