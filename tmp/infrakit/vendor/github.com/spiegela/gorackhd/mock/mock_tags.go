// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/spiegela/gorackhd/monorail (interfaces: TagIface)

package mock

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	tags "github.com/spiegela/gorackhd/client/tags"
)

// Mock of TagIface interface
type MockTagIface struct {
	ctrl     *gomock.Controller
	recorder *_MockTagIfaceRecorder
}

// Recorder for MockTagIface (not exported)
type _MockTagIfaceRecorder struct {
	mock *MockTagIface
}

func NewMockTagIface(ctrl *gomock.Controller) *MockTagIface {
	mock := &MockTagIface{ctrl: ctrl}
	mock.recorder = &_MockTagIfaceRecorder{mock}
	return mock
}

func (_m *MockTagIface) EXPECT() *_MockTagIfaceRecorder {
	return _m.recorder
}

func (_m *MockTagIface) CreateTag(_param0 *tags.CreateTagParams, _param1 runtime.ClientAuthInfoWriter) (*tags.CreateTagCreated, error) {
	ret := _m.ctrl.Call(_m, "CreateTag", _param0, _param1)
	ret0, _ := ret[0].(*tags.CreateTagCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTagIfaceRecorder) CreateTag(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTag", arg0, arg1)
}

func (_m *MockTagIface) DeleteTag(_param0 *tags.DeleteTagParams, _param1 runtime.ClientAuthInfoWriter) (*tags.DeleteTagNoContent, error) {
	ret := _m.ctrl.Call(_m, "DeleteTag", _param0, _param1)
	ret0, _ := ret[0].(*tags.DeleteTagNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTagIfaceRecorder) DeleteTag(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTag", arg0, arg1)
}

func (_m *MockTagIface) GetAllTags(_param0 *tags.GetAllTagsParams, _param1 runtime.ClientAuthInfoWriter) (*tags.GetAllTagsOK, error) {
	ret := _m.ctrl.Call(_m, "GetAllTags", _param0, _param1)
	ret0, _ := ret[0].(*tags.GetAllTagsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTagIfaceRecorder) GetAllTags(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllTags", arg0, arg1)
}

func (_m *MockTagIface) GetNodesByTag(_param0 *tags.GetNodesByTagParams, _param1 runtime.ClientAuthInfoWriter) (*tags.GetNodesByTagOK, error) {
	ret := _m.ctrl.Call(_m, "GetNodesByTag", _param0, _param1)
	ret0, _ := ret[0].(*tags.GetNodesByTagOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTagIfaceRecorder) GetNodesByTag(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNodesByTag", arg0, arg1)
}

func (_m *MockTagIface) GetTag(_param0 *tags.GetTagParams, _param1 runtime.ClientAuthInfoWriter) (*tags.GetTagOK, error) {
	ret := _m.ctrl.Call(_m, "GetTag", _param0, _param1)
	ret0, _ := ret[0].(*tags.GetTagOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTagIfaceRecorder) GetTag(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTag", arg0, arg1)
}

func (_m *MockTagIface) PostWorkflowByID(_param0 *tags.PostWorkflowByIDParams, _param1 runtime.ClientAuthInfoWriter) (*tags.PostWorkflowByIDAccepted, error) {
	ret := _m.ctrl.Call(_m, "PostWorkflowByID", _param0, _param1)
	ret0, _ := ret[0].(*tags.PostWorkflowByIDAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTagIfaceRecorder) PostWorkflowByID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostWorkflowByID", arg0, arg1)
}
