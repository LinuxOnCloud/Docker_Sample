// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/spiegela/gorackhd/monorail (interfaces: Iface)

package mock

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	monorail "github.com/spiegela/gorackhd/monorail"
)

// Mock of Iface interface
type MockIface struct {
	ctrl     *gomock.Controller
	recorder *_MockIfaceRecorder
}

// Recorder for MockIface (not exported)
type _MockIfaceRecorder struct {
	mock *MockIface
}

func NewMockIface(ctrl *gomock.Controller) *MockIface {
	mock := &MockIface{ctrl: ctrl}
	mock.recorder = &_MockIfaceRecorder{mock}
	return mock
}

func (_m *MockIface) EXPECT() *_MockIfaceRecorder {
	return _m.recorder
}

func (_m *MockIface) Login(_param0 string, _param1 string) (runtime.ClientAuthInfoWriter, error) {
	ret := _m.ctrl.Call(_m, "Login", _param0, _param1)
	ret0, _ := ret[0].(runtime.ClientAuthInfoWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIfaceRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Login", arg0, arg1)
}

func (_m *MockIface) Nodes() monorail.NodeIface {
	ret := _m.ctrl.Call(_m, "Nodes")
	ret0, _ := ret[0].(monorail.NodeIface)
	return ret0
}

func (_mr *_MockIfaceRecorder) Nodes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Nodes")
}

func (_m *MockIface) Skus() monorail.SkuIface {
	ret := _m.ctrl.Call(_m, "Skus")
	ret0, _ := ret[0].(monorail.SkuIface)
	return ret0
}

func (_mr *_MockIfaceRecorder) Skus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Skus")
}

func (_m *MockIface) Tags() monorail.TagIface {
	ret := _m.ctrl.Call(_m, "Tags")
	ret0, _ := ret[0].(monorail.TagIface)
	return ret0
}

func (_mr *_MockIfaceRecorder) Tags() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Tags")
}
