package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// AddUserReader is a Reader for the AddUser structure.
type AddUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAddUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewAddUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAddUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddUserCreated creates a AddUserCreated with default headers values
func NewAddUserCreated() *AddUserCreated {
	return &AddUserCreated{}
}

/*AddUserCreated handles this case with default header values.

Successfully created the user
*/
type AddUserCreated struct {
	Payload AddUserCreatedBody
}

func (o *AddUserCreated) Error() string {
	return fmt.Sprintf("[POST /users][%d] addUserCreated  %+v", 201, o.Payload)
}

func (o *AddUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserUnauthorized creates a AddUserUnauthorized with default headers values
func NewAddUserUnauthorized() *AddUserUnauthorized {
	return &AddUserUnauthorized{}
}

/*AddUserUnauthorized handles this case with default header values.

Unauthorized
*/
type AddUserUnauthorized struct {
	Payload AddUserUnauthorizedBody
}

func (o *AddUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users][%d] addUserUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserForbidden creates a AddUserForbidden with default headers values
func NewAddUserForbidden() *AddUserForbidden {
	return &AddUserForbidden{}
}

/*AddUserForbidden handles this case with default header values.

Forbidden
*/
type AddUserForbidden struct {
	Payload AddUserForbiddenBody
}

func (o *AddUserForbidden) Error() string {
	return fmt.Sprintf("[POST /users][%d] addUserForbidden  %+v", 403, o.Payload)
}

func (o *AddUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserDefault creates a AddUserDefault with default headers values
func NewAddUserDefault(code int) *AddUserDefault {
	return &AddUserDefault{
		_statusCode: code,
	}
}

/*AddUserDefault handles this case with default header values.

Unexpected error
*/
type AddUserDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the add user default response
func (o *AddUserDefault) Code() int {
	return o._statusCode
}

func (o *AddUserDefault) Error() string {
	return fmt.Sprintf("[POST /users][%d] addUser default  %+v", o._statusCode, o.Payload)
}

func (o *AddUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddUserCreatedBody add user created body
swagger:model AddUserCreatedBody
*/
type AddUserCreatedBody interface{}

/*AddUserForbiddenBody add user forbidden body
swagger:model AddUserForbiddenBody
*/
type AddUserForbiddenBody interface{}

/*AddUserUnauthorizedBody add user unauthorized body
swagger:model AddUserUnauthorizedBody
*/
type AddUserUnauthorizedBody interface{}
