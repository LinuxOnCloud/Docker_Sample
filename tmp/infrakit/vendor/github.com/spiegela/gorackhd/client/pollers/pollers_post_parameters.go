package pollers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// NewPollersPostParams creates a new PollersPostParams object
// with the default values initialized.
func NewPollersPostParams() *PollersPostParams {
	var ()
	return &PollersPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPollersPostParamsWithTimeout creates a new PollersPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPollersPostParamsWithTimeout(timeout time.Duration) *PollersPostParams {
	var ()
	return &PollersPostParams{

		timeout: timeout,
	}
}

// NewPollersPostParamsWithContext creates a new PollersPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewPollersPostParamsWithContext(ctx context.Context) *PollersPostParams {
	var ()
	return &PollersPostParams{

		Context: ctx,
	}
}

// NewPollersPostParamsWithHTTPClient creates a new PollersPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPollersPostParamsWithHTTPClient(client *http.Client) *PollersPostParams {
	var ()
	return &PollersPostParams{
		HTTPClient: client,
	}
}

/*PollersPostParams contains all the parameters to send to the API endpoint
for the pollers post operation typically these are written to a http.Request
*/
type PollersPostParams struct {

	/*Content
	  The request body must contain the necessary information to create the poller, including type, pollInterval, and command. The node identifier must also be included if the poller is to be associated with a node.


	*/
	Content *models.Poller20PartialPoller

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pollers post params
func (o *PollersPostParams) WithTimeout(timeout time.Duration) *PollersPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pollers post params
func (o *PollersPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pollers post params
func (o *PollersPostParams) WithContext(ctx context.Context) *PollersPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pollers post params
func (o *PollersPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pollers post params
func (o *PollersPostParams) WithHTTPClient(client *http.Client) *PollersPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pollers post params
func (o *PollersPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContent adds the content to the pollers post params
func (o *PollersPostParams) WithContent(content *models.Poller20PartialPoller) *PollersPostParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the pollers post params
func (o *PollersPostParams) SetContent(content *models.Poller20PartialPoller) {
	o.Content = content
}

// WriteToRequest writes these params to a swagger request
func (o *PollersPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Content == nil {
		o.Content = new(models.Poller20PartialPoller)
	}

	if err := r.SetBodyParam(o.Content); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
