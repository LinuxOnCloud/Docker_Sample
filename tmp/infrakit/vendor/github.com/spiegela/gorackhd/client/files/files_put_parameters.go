package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFilesPutParams creates a new FilesPutParams object
// with the default values initialized.
func NewFilesPutParams() *FilesPutParams {
	var ()
	return &FilesPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFilesPutParamsWithTimeout creates a new FilesPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFilesPutParamsWithTimeout(timeout time.Duration) *FilesPutParams {
	var ()
	return &FilesPutParams{

		timeout: timeout,
	}
}

// NewFilesPutParamsWithContext creates a new FilesPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewFilesPutParamsWithContext(ctx context.Context) *FilesPutParams {
	var ()
	return &FilesPutParams{

		Context: ctx,
	}
}

// NewFilesPutParamsWithHTTPClient creates a new FilesPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFilesPutParamsWithHTTPClient(client *http.Client) *FilesPutParams {
	var ()
	return &FilesPutParams{
		HTTPClient: client,
	}
}

/*FilesPutParams contains all the parameters to send to the API endpoint
for the files put operation typically these are written to a http.Request
*/
type FilesPutParams struct {

	/*Fileidentifier
	  The filename of the file you want to store

	*/
	Fileidentifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the files put params
func (o *FilesPutParams) WithTimeout(timeout time.Duration) *FilesPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the files put params
func (o *FilesPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the files put params
func (o *FilesPutParams) WithContext(ctx context.Context) *FilesPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the files put params
func (o *FilesPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the files put params
func (o *FilesPutParams) WithHTTPClient(client *http.Client) *FilesPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the files put params
func (o *FilesPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFileidentifier adds the fileidentifier to the files put params
func (o *FilesPutParams) WithFileidentifier(fileidentifier string) *FilesPutParams {
	o.SetFileidentifier(fileidentifier)
	return o
}

// SetFileidentifier adds the fileidentifier to the files put params
func (o *FilesPutParams) SetFileidentifier(fileidentifier string) {
	o.Fileidentifier = fileidentifier
}

// WriteToRequest writes these params to a swagger request
func (o *FilesPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param fileidentifier
	if err := r.SetPathParam("fileidentifier", o.Fileidentifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
