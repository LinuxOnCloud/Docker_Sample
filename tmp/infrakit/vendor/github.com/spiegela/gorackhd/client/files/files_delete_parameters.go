package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFilesDeleteParams creates a new FilesDeleteParams object
// with the default values initialized.
func NewFilesDeleteParams() *FilesDeleteParams {
	var ()
	return &FilesDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFilesDeleteParamsWithTimeout creates a new FilesDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFilesDeleteParamsWithTimeout(timeout time.Duration) *FilesDeleteParams {
	var ()
	return &FilesDeleteParams{

		timeout: timeout,
	}
}

// NewFilesDeleteParamsWithContext creates a new FilesDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewFilesDeleteParamsWithContext(ctx context.Context) *FilesDeleteParams {
	var ()
	return &FilesDeleteParams{

		Context: ctx,
	}
}

// NewFilesDeleteParamsWithHTTPClient creates a new FilesDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFilesDeleteParamsWithHTTPClient(client *http.Client) *FilesDeleteParams {
	var ()
	return &FilesDeleteParams{
		HTTPClient: client,
	}
}

/*FilesDeleteParams contains all the parameters to send to the API endpoint
for the files delete operation typically these are written to a http.Request
*/
type FilesDeleteParams struct {

	/*Fileidentifier
	  UUID of the file you wish to delete

	*/
	Fileidentifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the files delete params
func (o *FilesDeleteParams) WithTimeout(timeout time.Duration) *FilesDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the files delete params
func (o *FilesDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the files delete params
func (o *FilesDeleteParams) WithContext(ctx context.Context) *FilesDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the files delete params
func (o *FilesDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the files delete params
func (o *FilesDeleteParams) WithHTTPClient(client *http.Client) *FilesDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the files delete params
func (o *FilesDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFileidentifier adds the fileidentifier to the files delete params
func (o *FilesDeleteParams) WithFileidentifier(fileidentifier string) *FilesDeleteParams {
	o.SetFileidentifier(fileidentifier)
	return o
}

// SetFileidentifier adds the fileidentifier to the files delete params
func (o *FilesDeleteParams) SetFileidentifier(fileidentifier string) {
	o.Fileidentifier = fileidentifier
}

// WriteToRequest writes these params to a swagger request
func (o *FilesDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param fileidentifier
	if err := r.SetPathParam("fileidentifier", o.Fileidentifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
