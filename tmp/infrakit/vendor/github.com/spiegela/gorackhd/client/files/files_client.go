package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new files API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for files API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FilesDelete deletes a file

Delete a file based on uuid.
*/
func (a *Client) FilesDelete(params *FilesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*FilesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesDelete",
		Method:             "DELETE",
		PathPattern:        "/files/{fileidentifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesDeleteNoContent), nil

}

/*
FilesGet gets a file

Get file based on uuid or file name.
*/
func (a *Client) FilesGet(params *FilesGetParams, authInfo runtime.ClientAuthInfoWriter) (*FilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesGet",
		Method:             "GET",
		PathPattern:        "/files/{fileidentifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesGetOK), nil

}

/*
FilesGetAll gets all files

Get a list of all files currently stored.
*/
func (a *Client) FilesGetAll(params *FilesGetAllParams, authInfo runtime.ClientAuthInfoWriter) (*FilesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesGetAll",
		Method:             "GET",
		PathPattern:        "/files",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesGetAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesGetAllOK), nil

}

/*
FilesGetAllStatic lists all static files

List all static files

*/
func (a *Client) FilesGetAllStatic(params *FilesGetAllStaticParams, authInfo runtime.ClientAuthInfoWriter) (*FilesGetAllStaticOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesGetAllStaticParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesGetAllStatic",
		Method:             "GET",
		PathPattern:        "/files/static/list",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesGetAllStaticReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesGetAllStaticOK), nil

}

/*
FilesMd5Get gets md5sum of file

Get md5sum based on file name.
*/
func (a *Client) FilesMd5Get(params *FilesMd5GetParams, authInfo runtime.ClientAuthInfoWriter) (*FilesMd5GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesMd5GetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesMd5Get",
		Method:             "GET",
		PathPattern:        "/files/{filename}/md5",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesMd5GetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesMd5GetOK), nil

}

/*
FilesMetadataGet gets file metadata

Get file metadata by file name.
*/
func (a *Client) FilesMetadataGet(params *FilesMetadataGetParams, authInfo runtime.ClientAuthInfoWriter) (*FilesMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesMetadataGet",
		Method:             "GET",
		PathPattern:        "/files/{filename}/metadata",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesMetadataGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesMetadataGetOK), nil

}

/*
FilesPut puts a file

Put file based on its filename. Returns the uuid of the stored file.
*/
func (a *Client) FilesPut(params *FilesPutParams, authInfo runtime.ClientAuthInfoWriter) (*FilesPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesPut",
		Method:             "PUT",
		PathPattern:        "/files/{fileidentifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/octet-stream", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesPutCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
