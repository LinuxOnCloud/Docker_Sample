package ibms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ibms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ibms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
IbmsDefinitionsGetAll gets list of i b m s services

Get a list of IBMS schemas, which define the properties required to create IBMS settings.
*/
func (a *Client) IbmsDefinitionsGetAll(params *IbmsDefinitionsGetAllParams, authInfo runtime.ClientAuthInfoWriter) (*IbmsDefinitionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsDefinitionsGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsDefinitionsGetAll",
		Method:             "GET",
		PathPattern:        "/ibms/definitions",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsDefinitionsGetAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsDefinitionsGetAllOK), nil

}

/*
IbmsDefinitionsGetByName gets an i b m s service definition

Get the contents of the specified IBMS service schema.
*/
func (a *Client) IbmsDefinitionsGetByName(params *IbmsDefinitionsGetByNameParams, authInfo runtime.ClientAuthInfoWriter) (*IbmsDefinitionsGetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsDefinitionsGetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsDefinitionsGetByName",
		Method:             "GET",
		PathPattern:        "/ibms/definitions/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsDefinitionsGetByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsDefinitionsGetByNameOK), nil

}

/*
IbmsDeleteByID deletes i b m s settings

Delete the IBMS settings with the specified identifier.
*/
func (a *Client) IbmsDeleteByID(params *IbmsDeleteByIDParams, authInfo runtime.ClientAuthInfoWriter) (*IbmsDeleteByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsDeleteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsDeleteById",
		Method:             "DELETE",
		PathPattern:        "/ibms/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsDeleteByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsDeleteByIDNoContent), nil

}

/*
IbmsGet gets list of all i b m service instances

Get a list of all In Band Management settings that have been associated with nodes.
*/
func (a *Client) IbmsGet(params *IbmsGetParams, authInfo runtime.ClientAuthInfoWriter) (*IbmsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsGet",
		Method:             "GET",
		PathPattern:        "/ibms",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsGetOK), nil

}

/*
IbmsGetByID gets an i b m s service

Get the IBMS settings associated with the specified identifier
*/
func (a *Client) IbmsGetByID(params *IbmsGetByIDParams, authInfo runtime.ClientAuthInfoWriter) (*IbmsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsGetById",
		Method:             "GET",
		PathPattern:        "/ibms/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsGetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsGetByIDOK), nil

}

/*
IbmsPatchByID patches i b m s settings

Update the properties of the IBMS settings with the specified identifier.
*/
func (a *Client) IbmsPatchByID(params *IbmsPatchByIDParams, authInfo runtime.ClientAuthInfoWriter) (*IbmsPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsPatchById",
		Method:             "PATCH",
		PathPattern:        "/ibms/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsPatchByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsPatchByIDOK), nil

}

/*
IbmsPut puts an i b m service

Create or update a single IBM service, and associate it with a node.
*/
func (a *Client) IbmsPut(params *IbmsPutParams, authInfo runtime.ClientAuthInfoWriter) (*IbmsPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsPut",
		Method:             "PUT",
		PathPattern:        "/ibms",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsPutCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
