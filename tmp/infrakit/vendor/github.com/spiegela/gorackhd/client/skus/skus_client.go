package skus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new skus API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for skus API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SkuPackPost posts a s k u pack

Create a new SKU Pack, which is used to serve the specified set of files to a node during provisioning.

*/
func (a *Client) SkuPackPost(params *SkuPackPostParams, authInfo runtime.ClientAuthInfoWriter) (*SkuPackPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkuPackPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skuPackPost",
		Method:             "POST",
		PathPattern:        "/skus/pack",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkuPackPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkuPackPostCreated), nil

}

/*
SkusGet gets list of s k us

Get list of currently defined SKUs, which are used to group nodes based on matching a set of rules with information present in a nodes catalog.

*/
func (a *Client) SkusGet(params *SkusGetParams, authInfo runtime.ClientAuthInfoWriter) (*SkusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusGet",
		Method:             "GET",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusGetOK), nil

}

/*
SkusIDDelete deletes a s k u

Delete the SKU with the specified identifier.
*/
func (a *Client) SkusIDDelete(params *SkusIDDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*SkusIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdDelete",
		Method:             "DELETE",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDDeleteNoContent), nil

}

/*
SkusIDDeletePack deletes a s k u pack

Delete a SKU Pack associated with the specified SKU.
*/
func (a *Client) SkusIDDeletePack(params *SkusIDDeletePackParams, authInfo runtime.ClientAuthInfoWriter) (*SkusIDDeletePackNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDDeletePackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdDeletePack",
		Method:             "DELETE",
		PathPattern:        "/skus/{identifier}/pack",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDDeletePackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDDeletePackNoContent), nil

}

/*
SkusIDGet gets the specified s k u

Get the SKU with the specified identifier.
*/
func (a *Client) SkusIDGet(params *SkusIDGetParams, authInfo runtime.ClientAuthInfoWriter) (*SkusIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdGet",
		Method:             "GET",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDGetOK), nil

}

/*
SkusIDGetNodes gets nodes for specific s k u

Get the nodes associated with the specified SKU definition.
*/
func (a *Client) SkusIDGetNodes(params *SkusIDGetNodesParams, authInfo runtime.ClientAuthInfoWriter) (*SkusIDGetNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDGetNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdGetNodes",
		Method:             "GET",
		PathPattern:        "/skus/{identifier}/nodes",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDGetNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDGetNodesOK), nil

}

/*
SkusIDPutPack puts a s k u pack to the specified s k u

Create or modify a SKU Pack, and associate the SKU Pack with the specified SKU.
*/
func (a *Client) SkusIDPutPack(params *SkusIDPutPackParams, authInfo runtime.ClientAuthInfoWriter) (*SkusIDPutPackCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDPutPackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdPutPack",
		Method:             "PUT",
		PathPattern:        "/skus/{identifier}/pack",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDPutPackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDPutPackCreated), nil

}

/*
SkusPatch patches a s k u

Modify the SKU with the specified identifier.
*/
func (a *Client) SkusPatch(params *SkusPatchParams, authInfo runtime.ClientAuthInfoWriter) (*SkusPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusPatch",
		Method:             "PATCH",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusPatchOK), nil

}

/*
SkusPost posts a s k u

Create a new SKU.
*/
func (a *Client) SkusPost(params *SkusPostParams, authInfo runtime.ClientAuthInfoWriter) (*SkusPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusPost",
		Method:             "POST",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusPostCreated), nil

}

/*
SkusPut puts a s k u

Create or modify a SKU.
*/
func (a *Client) SkusPut(params *SkusPutParams, authInfo runtime.ClientAuthInfoWriter) (*SkusPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusPut",
		Method:             "PUT",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusPutCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
