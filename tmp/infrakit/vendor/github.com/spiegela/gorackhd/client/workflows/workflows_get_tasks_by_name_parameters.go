package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewWorkflowsGetTasksByNameParams creates a new WorkflowsGetTasksByNameParams object
// with the default values initialized.
func NewWorkflowsGetTasksByNameParams() *WorkflowsGetTasksByNameParams {
	var ()
	return &WorkflowsGetTasksByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWorkflowsGetTasksByNameParamsWithTimeout creates a new WorkflowsGetTasksByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWorkflowsGetTasksByNameParamsWithTimeout(timeout time.Duration) *WorkflowsGetTasksByNameParams {
	var ()
	return &WorkflowsGetTasksByNameParams{

		timeout: timeout,
	}
}

// NewWorkflowsGetTasksByNameParamsWithContext creates a new WorkflowsGetTasksByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewWorkflowsGetTasksByNameParamsWithContext(ctx context.Context) *WorkflowsGetTasksByNameParams {
	var ()
	return &WorkflowsGetTasksByNameParams{

		Context: ctx,
	}
}

// NewWorkflowsGetTasksByNameParamsWithHTTPClient creates a new WorkflowsGetTasksByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWorkflowsGetTasksByNameParamsWithHTTPClient(client *http.Client) *WorkflowsGetTasksByNameParams {
	var ()
	return &WorkflowsGetTasksByNameParams{
		HTTPClient: client,
	}
}

/*WorkflowsGetTasksByNameParams contains all the parameters to send to the API endpoint
for the workflows get tasks by name operation typically these are written to a http.Request
*/
type WorkflowsGetTasksByNameParams struct {

	/*InjectableName
	  The task injectable name

	*/
	InjectableName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) WithTimeout(timeout time.Duration) *WorkflowsGetTasksByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) WithContext(ctx context.Context) *WorkflowsGetTasksByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) WithHTTPClient(client *http.Client) *WorkflowsGetTasksByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInjectableName adds the injectableName to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) WithInjectableName(injectableName string) *WorkflowsGetTasksByNameParams {
	o.SetInjectableName(injectableName)
	return o
}

// SetInjectableName adds the injectableName to the workflows get tasks by name params
func (o *WorkflowsGetTasksByNameParams) SetInjectableName(injectableName string) {
	o.InjectableName = injectableName
}

// WriteToRequest writes these params to a swagger request
func (o *WorkflowsGetTasksByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param injectableName
	if err := r.SetPathParam("injectableName", o.InjectableName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
