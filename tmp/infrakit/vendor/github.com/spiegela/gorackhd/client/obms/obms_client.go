package obms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new obms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for obms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ObmsDefinitionsGetAll gets list of o b m services

Get a list of OBM schemas, which define the properties required to create OBM settings.
*/
func (a *Client) ObmsDefinitionsGetAll(params *ObmsDefinitionsGetAllParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsDefinitionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsDefinitionsGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsDefinitionsGetAll",
		Method:             "GET",
		PathPattern:        "/obms/definitions",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsDefinitionsGetAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsDefinitionsGetAllOK), nil

}

/*
ObmsDefinitionsGetByName gets an o b m service definition

Get the contents of the specified OBM service schema.
*/
func (a *Client) ObmsDefinitionsGetByName(params *ObmsDefinitionsGetByNameParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsDefinitionsGetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsDefinitionsGetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsDefinitionsGetByName",
		Method:             "GET",
		PathPattern:        "/obms/definitions/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsDefinitionsGetByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsDefinitionsGetByNameOK), nil

}

/*
ObmsDeleteByID deletes o b m settings

Delete the OBM settings with the specified identifier.
*/
func (a *Client) ObmsDeleteByID(params *ObmsDeleteByIDParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsDeleteByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsDeleteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsDeleteById",
		Method:             "DELETE",
		PathPattern:        "/obms/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsDeleteByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsDeleteByIDNoContent), nil

}

/*
ObmsGet gets list of all o b m service instances

Get a list of all OBM settings that have been associated with nodes. OBM settings allow RackHD to communicate with the BMC of a node.

*/
func (a *Client) ObmsGet(params *ObmsGetParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsGet",
		Method:             "GET",
		PathPattern:        "/obms",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsGetOK), nil

}

/*
ObmsGetByID gets an o b m service

Get the OBM settings associated with the specified identifier
*/
func (a *Client) ObmsGetByID(params *ObmsGetByIDParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsGetById",
		Method:             "GET",
		PathPattern:        "/obms/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsGetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsGetByIDOK), nil

}

/*
ObmsPatchByID patches o b m settings

Update the properties of the OBM settings with the specified identifier.
*/
func (a *Client) ObmsPatchByID(params *ObmsPatchByIDParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsPatchById",
		Method:             "PATCH",
		PathPattern:        "/obms/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsPatchByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsPatchByIDOK), nil

}

/*
ObmsPostLed sets identify light status

Enable or disable identify LED on node through OBM, if supported.
*/
func (a *Client) ObmsPostLed(params *ObmsPostLedParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsPostLedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsPostLedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsPostLed",
		Method:             "POST",
		PathPattern:        "/obms/led",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsPostLedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsPostLedCreated), nil

}

/*
ObmsPut puts an o b m service

Create or update the specified OBM service, and associate it with a node.
*/
func (a *Client) ObmsPut(params *ObmsPutParams, authInfo runtime.ClientAuthInfoWriter) (*ObmsPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsPut",
		Method:             "PUT",
		PathPattern:        "/obms",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsPutCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
