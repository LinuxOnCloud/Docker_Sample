package profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new profiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for profiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProfilesGet gets list of profiles

Get the list of currently defined profiles. Profiles are scripts used by RackHD to control how a node PXE boots.

*/
func (a *Client) ProfilesGet(params *ProfilesGetParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGet",
		Method:             "GET",
		PathPattern:        "/profiles",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetOK), nil

}

/*
ProfilesGetLibByName gets contents of a profile

Get the contents of a profile specified by its name.
*/
func (a *Client) ProfilesGetLibByName(params *ProfilesGetLibByNameParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilesGetLibByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetLibByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetLibByName",
		Method:             "GET",
		PathPattern:        "/profiles/library/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetLibByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetLibByNameOK), nil

}

/*
ProfilesGetMetadata gets list of profile metadata

Get the list of metadata associated with all known profiles.
*/
func (a *Client) ProfilesGetMetadata(params *ProfilesGetMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilesGetMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetMetadata",
		Method:             "GET",
		PathPattern:        "/profiles/metadata",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetMetadataOK), nil

}

/*
ProfilesGetMetadataByName gets the specified profiles metadata from database

Get the metadata associated with the specified profile.
*/
func (a *Client) ProfilesGetMetadataByName(params *ProfilesGetMetadataByNameParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilesGetMetadataByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetMetadataByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetMetadataByName",
		Method:             "GET",
		PathPattern:        "/profiles/metadata/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetMetadataByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetMetadataByNameOK), nil

}

/*
ProfilesGetSwitchVendor gets a profile

Get a profile rendered with the switch vendor name.
*/
func (a *Client) ProfilesGetSwitchVendor(params *ProfilesGetSwitchVendorParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilesGetSwitchVendorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetSwitchVendorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetSwitchVendor",
		Method:             "GET",
		PathPattern:        "/profiles/switch/{vendor}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetSwitchVendorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetSwitchVendorOK), nil

}

/*
ProfilesPostSwitchError posts a switch error

Manually send a switch error to the log, since most switches do not generate errors.
*/
func (a *Client) ProfilesPostSwitchError(params *ProfilesPostSwitchErrorParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilesPostSwitchErrorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesPostSwitchErrorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesPostSwitchError",
		Method:             "POST",
		PathPattern:        "/profiles/switch/error",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesPostSwitchErrorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesPostSwitchErrorCreated), nil

}

/*
ProfilesPutLibByName puts a profile

Create or modify the specified profile metadata and contents.
*/
func (a *Client) ProfilesPutLibByName(params *ProfilesPutLibByNameParams, authInfo runtime.ClientAuthInfoWriter) (*ProfilesPutLibByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesPutLibByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesPutLibByName",
		Method:             "PUT",
		PathPattern:        "/profiles/library/{name}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/octet-stream", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesPutLibByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesPutLibByNameCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
