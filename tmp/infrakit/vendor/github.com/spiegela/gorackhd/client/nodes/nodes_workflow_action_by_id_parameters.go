package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// NewNodesWorkflowActionByIDParams creates a new NodesWorkflowActionByIDParams object
// with the default values initialized.
func NewNodesWorkflowActionByIDParams() *NodesWorkflowActionByIDParams {
	var ()
	return &NodesWorkflowActionByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNodesWorkflowActionByIDParamsWithTimeout creates a new NodesWorkflowActionByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNodesWorkflowActionByIDParamsWithTimeout(timeout time.Duration) *NodesWorkflowActionByIDParams {
	var ()
	return &NodesWorkflowActionByIDParams{

		timeout: timeout,
	}
}

// NewNodesWorkflowActionByIDParamsWithContext creates a new NodesWorkflowActionByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewNodesWorkflowActionByIDParamsWithContext(ctx context.Context) *NodesWorkflowActionByIDParams {
	var ()
	return &NodesWorkflowActionByIDParams{

		Context: ctx,
	}
}

// NewNodesWorkflowActionByIDParamsWithHTTPClient creates a new NodesWorkflowActionByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewNodesWorkflowActionByIDParamsWithHTTPClient(client *http.Client) *NodesWorkflowActionByIDParams {
	var ()
	return &NodesWorkflowActionByIDParams{
		HTTPClient: client,
	}
}

/*NodesWorkflowActionByIDParams contains all the parameters to send to the API endpoint
for the nodes workflow action by Id operation typically these are written to a http.Request
*/
type NodesWorkflowActionByIDParams struct {

	/*Action
	  The action property set to the command to execute

	*/
	Action *models.Action
	/*Identifier
	  The node identifier

	*/
	Identifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) WithTimeout(timeout time.Duration) *NodesWorkflowActionByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) WithContext(ctx context.Context) *NodesWorkflowActionByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) WithHTTPClient(client *http.Client) *NodesWorkflowActionByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) WithAction(action *models.Action) *NodesWorkflowActionByIDParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) SetAction(action *models.Action) {
	o.Action = action
}

// WithIdentifier adds the identifier to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) WithIdentifier(identifier string) *NodesWorkflowActionByIDParams {
	o.SetIdentifier(identifier)
	return o
}

// SetIdentifier adds the identifier to the nodes workflow action by Id params
func (o *NodesWorkflowActionByIDParams) SetIdentifier(identifier string) {
	o.Identifier = identifier
}

// WriteToRequest writes these params to a swagger request
func (o *NodesWorkflowActionByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action == nil {
		o.Action = new(models.Action)
	}

	if err := r.SetBodyParam(o.Action); err != nil {
		return err
	}

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
