package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// NewNodesAddRelationsParams creates a new NodesAddRelationsParams object
// with the default values initialized.
func NewNodesAddRelationsParams() *NodesAddRelationsParams {
	var ()
	return &NodesAddRelationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNodesAddRelationsParamsWithTimeout creates a new NodesAddRelationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNodesAddRelationsParamsWithTimeout(timeout time.Duration) *NodesAddRelationsParams {
	var ()
	return &NodesAddRelationsParams{

		timeout: timeout,
	}
}

// NewNodesAddRelationsParamsWithContext creates a new NodesAddRelationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewNodesAddRelationsParamsWithContext(ctx context.Context) *NodesAddRelationsParams {
	var ()
	return &NodesAddRelationsParams{

		Context: ctx,
	}
}

// NewNodesAddRelationsParamsWithHTTPClient creates a new NodesAddRelationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewNodesAddRelationsParamsWithHTTPClient(client *http.Client) *NodesAddRelationsParams {
	var ()
	return &NodesAddRelationsParams{
		HTTPClient: client,
	}
}

/*NodesAddRelationsParams contains all the parameters to send to the API endpoint
for the nodes add relations operation typically these are written to a http.Request
*/
type NodesAddRelationsParams struct {

	/*Content
	  A json object with relation types as keys and arrays of node ids as values. The nodes given relation types will be updated with the nodes given by id


	*/
	Content models.GenericObj
	/*Identifier
	  The identifier for the node

	*/
	Identifier string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the nodes add relations params
func (o *NodesAddRelationsParams) WithTimeout(timeout time.Duration) *NodesAddRelationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nodes add relations params
func (o *NodesAddRelationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nodes add relations params
func (o *NodesAddRelationsParams) WithContext(ctx context.Context) *NodesAddRelationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nodes add relations params
func (o *NodesAddRelationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nodes add relations params
func (o *NodesAddRelationsParams) WithHTTPClient(client *http.Client) *NodesAddRelationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nodes add relations params
func (o *NodesAddRelationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContent adds the content to the nodes add relations params
func (o *NodesAddRelationsParams) WithContent(content models.GenericObj) *NodesAddRelationsParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the nodes add relations params
func (o *NodesAddRelationsParams) SetContent(content models.GenericObj) {
	o.Content = content
}

// WithIdentifier adds the identifier to the nodes add relations params
func (o *NodesAddRelationsParams) WithIdentifier(identifier string) *NodesAddRelationsParams {
	o.SetIdentifier(identifier)
	return o
}

// SetIdentifier adds the identifier to the nodes add relations params
func (o *NodesAddRelationsParams) SetIdentifier(identifier string) {
	o.Identifier = identifier
}

// WriteToRequest writes these params to a swagger request
func (o *NodesAddRelationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Content); err != nil {
		return err
	}

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
