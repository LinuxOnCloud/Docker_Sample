package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewNodesDelTagByIDParams creates a new NodesDelTagByIDParams object
// with the default values initialized.
func NewNodesDelTagByIDParams() *NodesDelTagByIDParams {
	var ()
	return &NodesDelTagByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNodesDelTagByIDParamsWithTimeout creates a new NodesDelTagByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNodesDelTagByIDParamsWithTimeout(timeout time.Duration) *NodesDelTagByIDParams {
	var ()
	return &NodesDelTagByIDParams{

		timeout: timeout,
	}
}

// NewNodesDelTagByIDParamsWithContext creates a new NodesDelTagByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewNodesDelTagByIDParamsWithContext(ctx context.Context) *NodesDelTagByIDParams {
	var ()
	return &NodesDelTagByIDParams{

		Context: ctx,
	}
}

// NewNodesDelTagByIDParamsWithHTTPClient creates a new NodesDelTagByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewNodesDelTagByIDParamsWithHTTPClient(client *http.Client) *NodesDelTagByIDParams {
	var ()
	return &NodesDelTagByIDParams{
		HTTPClient: client,
	}
}

/*NodesDelTagByIDParams contains all the parameters to send to the API endpoint
for the nodes del tag by Id operation typically these are written to a http.Request
*/
type NodesDelTagByIDParams struct {

	/*Identifier
	  The node identifier

	*/
	Identifier string
	/*TagName
	  The name of the tag

	*/
	TagName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) WithTimeout(timeout time.Duration) *NodesDelTagByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) WithContext(ctx context.Context) *NodesDelTagByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) WithHTTPClient(client *http.Client) *NodesDelTagByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIdentifier adds the identifier to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) WithIdentifier(identifier string) *NodesDelTagByIDParams {
	o.SetIdentifier(identifier)
	return o
}

// SetIdentifier adds the identifier to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) SetIdentifier(identifier string) {
	o.Identifier = identifier
}

// WithTagName adds the tagName to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) WithTagName(tagName string) *NodesDelTagByIDParams {
	o.SetTagName(tagName)
	return o
}

// SetTagName adds the tagName to the nodes del tag by Id params
func (o *NodesDelTagByIDParams) SetTagName(tagName string) {
	o.TagName = tagName
}

// WriteToRequest writes these params to a swagger request
func (o *NodesDelTagByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	// path param tagName
	if err := r.SetPathParam("tagName", o.TagName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
