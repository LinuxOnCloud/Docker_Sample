package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NodesAddRelations adds relationships between nodes

Edit the relations fields of a specifc node to add one more relationships.
*/
func (a *Client) NodesAddRelations(params *NodesAddRelationsParams, authInfo runtime.ClientAuthInfoWriter) (*NodesAddRelationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesAddRelationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesAddRelations",
		Method:             "PUT",
		PathPattern:        "/nodes/{identifier}/relations",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesAddRelationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesAddRelationsOK), nil

}

/*
NodesDelByID deletes a node

Delete the specified node.
*/
func (a *Client) NodesDelByID(params *NodesDelByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesDelByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesDelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesDelById",
		Method:             "DELETE",
		PathPattern:        "/nodes/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesDelByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesDelByIDNoContent), nil

}

/*
NodesDelRelations removes relations from a node

Edit the relations fields of nodes to remove specific relationships
*/
func (a *Client) NodesDelRelations(params *NodesDelRelationsParams, authInfo runtime.ClientAuthInfoWriter) (*NodesDelRelationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesDelRelationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesDelRelations",
		Method:             "DELETE",
		PathPattern:        "/nodes/{identifier}/relations",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesDelRelationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesDelRelationsNoContent), nil

}

/*
NodesDelTagByID deletes a tag from a node

Delete the specified tag from the specified node.
*/
func (a *Client) NodesDelTagByID(params *NodesDelTagByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesDelTagByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesDelTagByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesDelTagById",
		Method:             "DELETE",
		PathPattern:        "/nodes/{identifier}/tags/{tagName}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesDelTagByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesDelTagByIDNoContent), nil

}

/*
NodesGetAll gets a list of nodes

Get a list of all currently stored nodes.
*/
func (a *Client) NodesGetAll(params *NodesGetAllParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetAll",
		Method:             "GET",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetAllOK), nil

}

/*
NodesGetByID gets a node

Get all information on the specified node.
*/
func (a *Client) NodesGetByID(params *NodesGetByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetByIDOK), nil

}

/*
NodesGetCatalogByID gets the catalogs for a node

Get a list of all of the catalogs for the specified node.
*/
func (a *Client) NodesGetCatalogByID(params *NodesGetCatalogByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetCatalogByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetCatalogByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetCatalogById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/catalogs",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetCatalogByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetCatalogByIDOK), nil

}

/*
NodesGetCatalogSourceByID gets the catalogs for a node by source

Get a list of all of the catalogs for the specified node, containing the specified value of the source catalog property.
*/
func (a *Client) NodesGetCatalogSourceByID(params *NodesGetCatalogSourceByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetCatalogSourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetCatalogSourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetCatalogSourceById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/catalogs/{source}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetCatalogSourceByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetCatalogSourceByIDOK), nil

}

/*
NodesGetObmsByNodeID gets all o b m services

Get all the OBM settings for the specified node.
*/
func (a *Client) NodesGetObmsByNodeID(params *NodesGetObmsByNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetObmsByNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetObmsByNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetObmsByNodeId",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/obm",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetObmsByNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetObmsByNodeIDOK), nil

}

/*
NodesGetPollersByID gets the pollers for a node

Get a list of all of the pollers for the specified node.
*/
func (a *Client) NodesGetPollersByID(params *NodesGetPollersByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetPollersByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetPollersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetPollersById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/pollers",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetPollersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetPollersByIDOK), nil

}

/*
NodesGetRelations gets a nodes relations

Get the relations field of the specified node
*/
func (a *Client) NodesGetRelations(params *NodesGetRelationsParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetRelationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetRelationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetRelations",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/relations",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetRelationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetRelationsOK), nil

}

/*
NodesGetSSHByID gets the ssh settings for a node

Get all of the ssh settings associated with the specified node.
*/
func (a *Client) NodesGetSSHByID(params *NodesGetSSHByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetSSHByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetSSHByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetSshById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/ssh",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetSSHByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetSSHByIDOK), nil

}

/*
NodesGetTagsByID gets node tags

Get a list of all tags associated with the specified node.
*/
func (a *Client) NodesGetTagsByID(params *NodesGetTagsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetTagsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetTagsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetTagsById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/tags",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetTagsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetTagsByIDOK), nil

}

/*
NodesGetWorkflowByID gets all workflows for a node

Get a list of all workflows that have run against the specified node, or are currently running against the node.

*/
func (a *Client) NodesGetWorkflowByID(params *NodesGetWorkflowByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesGetWorkflowByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetWorkflowById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/workflows",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetWorkflowByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetWorkflowByIDOK), nil

}

/*
NodesMasterDelTagByID deletes nodes tag

Delete specified tag from all nodes.
*/
func (a *Client) NodesMasterDelTagByID(params *NodesMasterDelTagByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesMasterDelTagByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesMasterDelTagByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesMasterDelTagById",
		Method:             "DELETE",
		PathPattern:        "/nodes/tags/{tagName}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesMasterDelTagByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesMasterDelTagByIDNoContent), nil

}

/*
NodesPatchByID patches a node

Modify the properties of the specified node.
*/
func (a *Client) NodesPatchByID(params *NodesPatchByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPatchById",
		Method:             "PATCH",
		PathPattern:        "/nodes/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPatchByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPatchByIDOK), nil

}

/*
NodesPatchTagByID patches node tags

Modify the tag(s) associated with the specified node.
*/
func (a *Client) NodesPatchTagByID(params *NodesPatchTagByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesPatchTagByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPatchTagByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPatchTagById",
		Method:             "PATCH",
		PathPattern:        "/nodes/{identifier}/tags",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPatchTagByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPatchTagByIDOK), nil

}

/*
NodesPost posts a node

Create and store a new node manually.
*/
func (a *Client) NodesPost(params *NodesPostParams, authInfo runtime.ClientAuthInfoWriter) (*NodesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPost",
		Method:             "POST",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPostCreated), nil

}

/*
NodesPostSSHByID posts ssh settings

Create the ssh settings associated with the specified node.
*/
func (a *Client) NodesPostSSHByID(params *NodesPostSSHByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesPostSSHByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPostSSHByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPostSshById",
		Method:             "POST",
		PathPattern:        "/nodes/{identifier}/ssh",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPostSSHByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPostSSHByIDCreated), nil

}

/*
NodesPostWorkflowByID posts workflow for the node

Run a workflow against for the specified node.
*/
func (a *Client) NodesPostWorkflowByID(params *NodesPostWorkflowByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesPostWorkflowByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPostWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPostWorkflowById",
		Method:             "POST",
		PathPattern:        "/nodes/{identifier}/workflows",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPostWorkflowByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPostWorkflowByIDCreated), nil

}

/*
NodesPutObmsByNodeID puts an o b m service

Create or update the specified OBM service with the associated Node ID
*/
func (a *Client) NodesPutObmsByNodeID(params *NodesPutObmsByNodeIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesPutObmsByNodeIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPutObmsByNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPutObmsByNodeId",
		Method:             "PUT",
		PathPattern:        "/nodes/{identifier}/obm",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPutObmsByNodeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPutObmsByNodeIDCreated), nil

}

/*
NodesWorkflowActionByID performs an action on a workflow

Perform an action on a workflow associated with a node. Currently, the cancel action is supported.

*/
func (a *Client) NodesWorkflowActionByID(params *NodesWorkflowActionByIDParams, authInfo runtime.ClientAuthInfoWriter) (*NodesWorkflowActionByIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesWorkflowActionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesWorkflowActionById",
		Method:             "PUT",
		PathPattern:        "/nodes/{identifier}/workflows/action",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesWorkflowActionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesWorkflowActionByIDAccepted), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
