package hooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// HooksPatchByIDReader is a Reader for the HooksPatchByID structure.
type HooksPatchByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HooksPatchByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHooksPatchByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewHooksPatchByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewHooksPatchByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewHooksPatchByIDOK creates a HooksPatchByIDOK with default headers values
func NewHooksPatchByIDOK() *HooksPatchByIDOK {
	return &HooksPatchByIDOK{}
}

/*HooksPatchByIDOK handles this case with default header values.

Successfully modified the hook
*/
type HooksPatchByIDOK struct {
	Payload HooksPatchByIDOKBody
}

func (o *HooksPatchByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /hooks/{identifier}][%d] hooksPatchByIdOK  %+v", 200, o.Payload)
}

func (o *HooksPatchByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHooksPatchByIDNotFound creates a HooksPatchByIDNotFound with default headers values
func NewHooksPatchByIDNotFound() *HooksPatchByIDNotFound {
	return &HooksPatchByIDNotFound{}
}

/*HooksPatchByIDNotFound handles this case with default header values.

The specified hook was not found
*/
type HooksPatchByIDNotFound struct {
	Payload *models.Error
}

func (o *HooksPatchByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /hooks/{identifier}][%d] hooksPatchByIdNotFound  %+v", 404, o.Payload)
}

func (o *HooksPatchByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHooksPatchByIDDefault creates a HooksPatchByIDDefault with default headers values
func NewHooksPatchByIDDefault(code int) *HooksPatchByIDDefault {
	return &HooksPatchByIDDefault{
		_statusCode: code,
	}
}

/*HooksPatchByIDDefault handles this case with default header values.

Unexpected error
*/
type HooksPatchByIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the hooks patch by Id default response
func (o *HooksPatchByIDDefault) Code() int {
	return o._statusCode
}

func (o *HooksPatchByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /hooks/{identifier}][%d] hooksPatchById default  %+v", o._statusCode, o.Payload)
}

func (o *HooksPatchByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*HooksPatchByIDOKBody hooks patch by ID o k body
swagger:model HooksPatchByIDOKBody
*/
type HooksPatchByIDOKBody interface{}
