package hooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hooks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hooks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
HooksDelByID deletes a hook

Delete a hook based on hook id.
*/
func (a *Client) HooksDelByID(params *HooksDelByIDParams, authInfo runtime.ClientAuthInfoWriter) (*HooksDelByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksDelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksDelById",
		Method:             "DELETE",
		PathPattern:        "/hooks/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksDelByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksDelByIDNoContent), nil

}

/*
HooksGetAll gets all hooks

Get all hooks
*/
func (a *Client) HooksGetAll(params *HooksGetAllParams, authInfo runtime.ClientAuthInfoWriter) (*HooksGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksGetAll",
		Method:             "GET",
		PathPattern:        "/hooks",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksGetAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksGetAllOK), nil

}

/*
HooksGetByID gets a hook

Get hook by id
*/
func (a *Client) HooksGetByID(params *HooksGetByIDParams, authInfo runtime.ClientAuthInfoWriter) (*HooksGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksGetById",
		Method:             "GET",
		PathPattern:        "/hooks/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksGetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksGetByIDOK), nil

}

/*
HooksPatchByID patches a hook

Modify the properties of a hook.
*/
func (a *Client) HooksPatchByID(params *HooksPatchByIDParams, authInfo runtime.ClientAuthInfoWriter) (*HooksPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksPatchById",
		Method:             "PATCH",
		PathPattern:        "/hooks/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksPatchByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksPatchByIDOK), nil

}

/*
HooksPost posts a hook

Create a new hook.
*/
func (a *Client) HooksPost(params *HooksPostParams, authInfo runtime.ClientAuthInfoWriter) (*HooksPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksPost",
		Method:             "POST",
		PathPattern:        "/hooks",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksPostCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
