package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// PostWorkflowByIDReader is a Reader for the PostWorkflowByID structure.
type PostWorkflowByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostWorkflowByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewPostWorkflowByIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPostWorkflowByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostWorkflowByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostWorkflowByIDAccepted creates a PostWorkflowByIDAccepted with default headers values
func NewPostWorkflowByIDAccepted() *PostWorkflowByIDAccepted {
	return &PostWorkflowByIDAccepted{}
}

/*PostWorkflowByIDAccepted handles this case with default header values.

Successfully posted workflow to all nodes with specified tag
*/
type PostWorkflowByIDAccepted struct {
	Payload PostWorkflowByIDAcceptedBody
}

func (o *PostWorkflowByIDAccepted) Error() string {
	return fmt.Sprintf("[POST /tags/{tagName}/nodes/workflows][%d] postWorkflowByIdAccepted  %+v", 202, o.Payload)
}

func (o *PostWorkflowByIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWorkflowByIDNotFound creates a PostWorkflowByIDNotFound with default headers values
func NewPostWorkflowByIDNotFound() *PostWorkflowByIDNotFound {
	return &PostWorkflowByIDNotFound{}
}

/*PostWorkflowByIDNotFound handles this case with default header values.

The specified tag was not found
*/
type PostWorkflowByIDNotFound struct {
	Payload *models.Error
}

func (o *PostWorkflowByIDNotFound) Error() string {
	return fmt.Sprintf("[POST /tags/{tagName}/nodes/workflows][%d] postWorkflowByIdNotFound  %+v", 404, o.Payload)
}

func (o *PostWorkflowByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWorkflowByIDDefault creates a PostWorkflowByIDDefault with default headers values
func NewPostWorkflowByIDDefault(code int) *PostWorkflowByIDDefault {
	return &PostWorkflowByIDDefault{
		_statusCode: code,
	}
}

/*PostWorkflowByIDDefault handles this case with default header values.

Unexpected error
*/
type PostWorkflowByIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post workflow by Id default response
func (o *PostWorkflowByIDDefault) Code() int {
	return o._statusCode
}

func (o *PostWorkflowByIDDefault) Error() string {
	return fmt.Sprintf("[POST /tags/{tagName}/nodes/workflows][%d] postWorkflowById default  %+v", o._statusCode, o.Payload)
}

func (o *PostWorkflowByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostWorkflowByIDAcceptedBody post workflow by ID accepted body
swagger:model PostWorkflowByIDAcceptedBody
*/
type PostWorkflowByIDAcceptedBody interface{}
